// Sort all
def sort(var arr : float[]; arr_size : int; compare : function<(a : float; b : float) : bool>){
    _sort(arr, 0, arr_size - 1, compare);
}
def _sort(var a : float[]; lo : int; hi : int; compare : function<(a : float; b : float) : bool>){
    if (lo >= hi){
        return ;
    }
    let j = _partition(a, lo, hi, compare);
    _sort(a, lo, j - 1, compare);
    _sort(a, j + 1, hi, compare);
}

def compare_float(a : float; b : float) {
    return a < b;
}
def _partition(var a : float[]; lo : int; hi : int; compare : function<(a : float; b : float) : bool>){
    var i = lo;
    var j = hi + 1;
    var v = a[lo];
    while (true) {
        i += 1;
        while (invoke(compare, a[i], v)){
            i += 1;
            if (i >= hi){
                break;
            }
        }
        j -= 1;
        while (invoke(compare, v, a[j])){
            j -= 1;
            if (j <= lo){
                break;
            }
        }
        if (i >= j){
            break;
        }
        exchange(a, i, j);
    }
    exchange(a, lo, j);
    return j;
}

def exchange(var a : float[]; i : int; j : int){
    let temp = a[i];
    a[i] = a[j];
    a[j] = temp;
}

[export]
def main(){
    var arr = [[float[] 0.4092442897626122; 0.17714554800222693; 0.22991500288324696; 0.4004099985181938; 0.17447760932382084;
                 0.5156805583825562; 0.3308748425274449; 0.15374934906199011; 0.7532222789053767; 0.10613680070953002;
                 0.45707774605995666; 0.49281539820073494; 0.8156126176499957; 0.6161556244740223; 0.6057246676928676;
                 0.8141111090149441; 0.42328483847552534; 0.29237674860277496; 0.7899296443671372; 0.2988113582257287;
                 0.7943074549927645; 0.000974700692971675; 0.14945916573996865; 0.5332927296046308; 0.6883450381898476;
                 0.8721016899169536; 0.3845999482219621; 0.7418718498272548; 0.7902294099560571; 0.04051586394661644;
                 0.18235333066383919; 0.7223778544839009; 0.6598066577248951; 0.6889408363524638; 0.042691298038216696;
                 0.3160056749006651; 0.9120859961164115; 0.22777096731514634; 0.6558005934771456; 0.4671449007742199;
                 0.12745465938727263; 0.7111123926764376; 0.7783072766584432; 0.7388933790858827; 0.2651061941553736;
                 0.9164133137665638; 0.9734442554354477; 0.3898915222011582; 0.4749133151239676; 0.5799673948314131;
                 0.4756500787645187; 0.8542407584338014; 0.49763351706121506; 0.8317658727717786; 0.34546671437859633;
                 0.022798983542343887; 0.6936399348016453; 0.48008814951381884; 0.8691106102231437;
                 0.027040265223150506; 0.15040952266491148; 0.3368242532820971; 0.9202617807996187; 0.3324236217414801;
                 0.12254466160047006; 0.6122770504725185; 0.0910985268970127; 0.27557507392071323; 0.2601435767275335;
                 0.6381372387123757; 0.838361177111167; 0.13000873385039213; 0.6927253935518772; 0.9738009109979264;
                 0.8330366620771515; 0.5694848480488421; 0.34513823710637204; 0.8652911705005452; 0.4322099614994377;
                 0.11019879579432612; 0.7951775962389244; 0.48964797483213207; 0.42356387471426493; 0.7228637141814122;
                 0.28548768772986355; 0.5035952165948322; 0.15650799680309713; 0.9575218032438767; 0.7108623388000382;
                 0.14490724230889862; 0.8091091037661762; 0.33811012061539847; 0.9483255339473119; 0.45149044189107623;
                 0.20033069205909781; 0.3511276966534437; 0.9073932490105007; 0.35397798650479007; 0.07863705236160501;
                 0.97269368907587]];
    sort(arr, int(length(arr)), @@compare_float);
}